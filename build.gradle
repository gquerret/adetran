
import oe.espresso.latte.*

plugins {
    id 'oe.espresso.latte' version '0.2.6'
}

abl {
    dlcHome = new File("${System.env.DLC}")
}

def dbdir = "${buildDir}/adetran/data"
def xlatedb = "${dbdir}/xlatedb.db"
def xlkitdb = "${dbdir}/xlkit.db"

task extractADEcomm {

    def extractables = [
        'adecomm/toolrun.i', 
        'adecomm/toolmenu.i', 
        'adecomm/toolsupp.i', 
        'adecomm/dirsrch.i', 
        'adecomm/cbvar.i',
        'adecomm/cbdropx.i',
        'adecomm/cbcdropx.i',
        'adecomm/cbtdropx.i',
        'adecomm/fileinfo.i',
        'adecomm/cbcomm.i',
        'adecomm/adeintl.i',
        'adecomm/adewrap.i',
        'adecomm/adestds.i',
        'adecomm/adefext.i'
    ]

    inputs.files file("${System.env.DLC}/src/adecomm.pl")

    extractables.each {
        outputs.files file("${buildDir}/adecomm/toolmenu.i")
    }

    doFirst {
        mkdir "${buildDir}/adecomm"
    }

    doLast {

        extractables.each {
            def fileName = it
            // if file already exists...prolib crashes trying to overwrite the file
            if (!new File("${buildDir}/${fileName}").exists()) {
                exec {
                    workingDir "${buildDir}"
                    commandLine "${System.env.DLC}/bin/prolib", "${System.env.DLC}/src/adecomm.pl", '-extract', fileName
                }
            }
        }
    }    
    
}


/**
create kit db
*/
task createKitDB(type: CreateDatabase) {
    dbName = "xlkit"
    blockSize = 8
    destDir = "${dbdir}"    

    doLast {
        convertCodePage (xlkitdb)
    }
}

/**
define connection to xlkitdb
 */
task connectKitDB(type: DBConnection) {
    dbName = 'xlkit'
    dbDir = "${dbdir}"
    id = 'xlkit'
    singleUser = true
    logicalName = 'kit'
    doFirst {
        mkdir "${dbdir}"
    }
}

task loadTranSchemaToKitDb(type: LoadSchema)  {
    dependsOn connectKitDB
    source 'data/'
    include '_tran.df'
    refid = "xlkit"

    doLast {
        indexBuild(xlkitdb)
    }
    
}

task loadKitSchemaToKitDb(type: LoadSchema)  {
    dependsOn connectKitDB
    source 'data/'
    include 'xlkit.df'
    refid = "xlkit"
}

task createKit() {
    dependsOn createKitDB
    dependsOn loadTranSchemaToKitDb
    dependsOn loadKitSchemaToKitDb
    dependsOn connectKitDB
}

def convertCodePage(String db) {

    mkdir "${buildDir}/temp"

    exec {
        workingDir = "${buildDir}/temp"
        commandLine "${System.env.DLC}/bin/_proutil", "-z3", db, "-C", "convchar", "convert", "undefined", "-G", "0"
        standardInput = new ByteArrayInputStream("y\r\n".getBytes())
    }
}

def indexBuild(String db) {
    mkdir "${buildDir}/temp"

    exec {
        workingDir = "${buildDir}/temp"
        commandLine "${System.env.DLC}/bin/_proutil", "-z3", db, "-C", "idxbuild", "all", "-G", "0"
    }
}

/**
create the xlatedb
 */
task createXLateDB(type: CreateDatabase) {
    dbName = "xlatedb"
    blockSize = 8
    destDir = "${dbdir}"

    doFirst {
        mkdir "${dbdir}"
    }
    doLast {
       convertCodePage(xlatedb)
    }    
}


/**
define connection to xlatedb
 */
task connectXLateDB(type: DBConnection) {
    mkdir "${dbdir}"
    dbName = 'xlatedb'
    dbDir = "${dbdir}"
    id = 'xlatedb'
    singleUser = true
}

task loadTranSchemaToXlateDb(type: LoadSchema)  {
    dependsOn connectXLateDB
    source 'data/'
    include '_tran.df'
    refid = "xlatedb"

    doLast {
        indexBuild(xlatedb)
    }
}

task loadKitSchemaToXlateDb(type: LoadSchema)  {
    dependsOn connectXLateDB
    source 'data/'
    include 'xlproj.df'
    refid = "xlatedb"
}


task createXlate () {
    dependsOn createXLateDB
    dependsOn loadTranSchemaToXlateDb
    dependsOn loadKitSchemaToXlateDb
    dependsOn connectXLateDB
}



task compileCode(type: CompileAblTask) {
    dependsOn createKit 
    dependsOn createXlate
    dependsOn extractADEcomm
    source('src/main/abl')
    include('**/*.p')
    include('**/*.w')
    compileUnderscore = true
    graphicalMode = true
    destinationDir = file("${buildDir}/rcode")
    propath = files('src/main/abl', "${buildDir}" )

    dbConnections << 'xlkit'
    dbConnections << 'xlatedb'
}

task copyImages(type : Copy) {
    from('images')
    into("${buildDir}/resources/adetran/images")
    doFirst {
        mkdir  "${buildDir}/resources/adetran/images"
    }
}

task copyLabels(type : Copy) {

    from('labels')
    into("${buildDir}/resources/adetran/labels")

    doFirst {
        mkdir "${buildDir}/resources/adetran/labels"
    }    
}

task createPL(type: CreateProcedureLibrary) {

    dependsOn compileCode
    destFile = "${buildDir}/lib/tranman.pl"
    baseDir = "${buildDir}/rcode"
    includes= "**/*.r"

    doFirst {
        mkdir "${buildDir}/lib"
    }

}


task runVisualTranslator(type : RunAbl) {
    dependsOn createPL
    procedure = 'adetran/wrappers/_tran.p'
    propath = files("${buildDir}/rcode" )
    graphicalMode = true

    dbConnections << 'kit'
    dbConnections << 'xlate'

}

task build {
    dependsOn compileCode
    dependsOn copyImages
    dependsOn copyLabels
    dependsOn createPL
}

task clean {
    delete file ("${buildDir}")
}
