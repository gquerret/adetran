
import oe.espresso.latte.*


buildscript {

    repositories {
        flatDir {
          dirs '../latte/build/libs'
        }
    }


  dependencies {
    classpath "oe.espresso.latte:latte:0.2.5"
  }
}

apply plugin: 'oe.espresso.latte'

abl {
    dlcHome = new File("${System.env.DLC}")
}

def xlatedb = "${buildDir}/db/xlate/xlatedb.db"
def kitdb = "${buildDir}/db/kit/kit.db"

task extractADEcomm {

    def extractables = ['adecomm/toolrun.i', 'adecomm/toolmenu.i', 'adecomm/toolsupp.i']

    inputs.files file("${System.env.DLC}/src/adecomm.pl")

    extractables.each {
        outputs.files file("${buildDir}/adecomm/toolmenu.i")
    }

    doFirst {
        mkdir "${buildDir}/adecomm"
    }

    doLast {

        extractables.each {
            def fileName = it
            // if file already exists...prolib crashes trying to overwrite the file
            if (!new File("${buildDir}/${fileName}").exists()) {
                exec {
                    workingDir "${buildDir}"
                    commandLine "${System.env.DLC}/bin/prolib", "${System.env.DLC}/src/adecomm.pl", '-extract', fileName
                }
            }
        }
    }    
    
}


/**
create kit db
*/
task createKitDB(type: CreateDatabase) {
    dbName = "kit"
    blockSize = 8
    destDir = "${buildDir}/db/kit"    

    doLast {
        convertCodePage (kitdb)
    }
}

/**
define connection to kitdb
 */
task connectKitDB(type: DBConnection) {
    doFirst {
        mkdir "${buildDir}/db/kit"
    }
    dbName = 'kit'
    dbDir = "${buildDir}/db/kit"
    id = 'kit'
    singleUser = true
}

task loadTranSchemaToKitDb(type: LoadSchema)  {
    dependsOn connectKitDB
    source 'data/'
    include '_tran.df'
    refid = "kit"

    doLast {
        indexBuild(kitdb)
    }
    
}

task loadKitSchemaToKitDb(type: LoadSchema)  {
    dependsOn connectKitDB
    source 'data/'
    include 'xlkit.df'
    refid = "kit"
}

task createKit() {
    dependsOn createKitDB
    dependsOn loadTranSchemaToKitDb
    dependsOn loadKitSchemaToKitDb
    dependsOn connectKitDB
}

def convertCodePage(String db) {
    exec {
        commandLine "${System.env.DLC}/bin/_proutil", "-z3", db, "-C", "convchar", "convert", "undefined", "-G", "0"
        standardInput = new ByteArrayInputStream("y\r\n".getBytes())
    }
}

def indexBuild(String db) {
    exec {
        commandLine "${System.env.DLC}/bin/_proutil", "-z3", db, "-C", "idxbuild", "all", "-G", "0"
    }
}

/**
create the xlatedb
 */
task createXLateDB(type: CreateDatabase) {
    doFirst {
        mkdir "${buildDir}/db/xlate"
    }
    dbName = "xlatedb"
    blockSize = 8
    destDir = "${buildDir}/db/xlate"

    doLast {
       convertCodePage(xlatedb)
    }    
}


/**
define connection to xlatedb
 */
task connectXLateDB(type: DBConnection) {
    mkdir "${buildDir}/db/xlate"
    dbName = 'xlatedb'
    dbDir = "${buildDir}/db/xlate"
    id = 'xlate'
    singleUser = true
}

task loadTranSchemaToXlateDb(type: LoadSchema)  {
    dependsOn connectXLateDB
    source 'data/'
    include '_tran.df'
    refid = "xlate"

    doLast {
        indexBuild(xlatedb)
    }
}

task loadKitSchemaToXlateDb(type: LoadSchema)  {
    dependsOn connectXLateDB
    source 'data/'
    include 'xlproj.df'
    refid = "xlate"
}


task createXlate () {
    dependsOn createXLateDB
    dependsOn loadTranSchemaToXlateDb
    dependsOn loadKitSchemaToXlateDb
    dependsOn connectXLateDB
}



task compileCode(type: CompileAblTask) {
    dependsOn createKit 
    dependsOn createXlate
    dependsOn extractADEcomm
    source('src/main/abl')
    include('**/*.p')
    compileUnderscore = true
    destinationDir = file("${buildDir}/rcode")
    propath = files('src/main/abl', "${buildDir}" )

    dbConnections << 'kit'
    dbConnections << 'xlate'
}

task build {
    dependsOn compileCode
}

task clean {
    delete file ("${buildDir}")
}

defaultTasks 'build'